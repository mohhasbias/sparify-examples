{"version":3,"sources":["../../../lib/node/release.js"],"names":[],"mappings":";;;;;kBAQwB,W;;AARxB;;AACA;;AAEA;;;;;AAKe,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACxC;AACA,MAAM,QAAQ,kBAAW,GAAX,CAAe,IAAf,CAAd;;AAEA;AACA,MAAI,SAAS,MAAM,OAAnB,EAA4B;AAC1B,kCAAiB,MAAM,OAAvB;AACD;;AAED;AACA,oBAAW,MAAX,CAAkB,IAAlB;;AAEA;AACA;AACD","file":"release.js","sourcesContent":["import { StateCache } from '../util/cache';\nimport { cleanMemory, unprotectElement } from '../util/memory';\n\n/**\n * Releases state and recycles internal memory.\n *\n * @param node {Object} - A DOM Node to lookup state from\n */\nexport default function releaseNode(node) {\n  // Try and find a state object for this DOM Node.\n  const state = StateCache.get(node);\n\n  // If there is a Virtual Tree element, recycle all objects allocated for it.\n  if (state && state.oldTree) {\n    unprotectElement(state.oldTree);\n  }\n\n  // Remove the Node's state object from the cache.\n  StateCache.delete(node);\n\n  // Recycle all unprotected objects.\n  cleanMemory();\n}\n"]}