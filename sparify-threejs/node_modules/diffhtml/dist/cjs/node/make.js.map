{"version":3,"sources":["../../../lib/node/make.js"],"names":[],"mappings":";;;;;;;;kBAuCwB,I;;AAvCxB;;AACA;;IAAY,G;;AACZ;;;;AAEA;;;;;;;AAOA,IAAM,qBAAqB,SAArB,kBAAqB,OAA6B;AAAA,MAA1B,QAA0B,QAA1B,QAA0B;AAAA,MAAhB,SAAgB,QAAhB,SAAgB;;AACtD;AACA;AACA;AACA,MAAI,aAAa,OAAjB,EAA0B;AACxB,WAAO,SAAS,cAAT,CAAwB,SAAxB,CAAP;AACD;AACD;AACA;AACA;AACA;AANA,OAOK,IAAI,IAAI,QAAJ,CAAa,OAAb,CAAqB,QAArB,IAAiC,CAAC,CAAtC,EAAyC;AAC5C,aAAO,SAAS,eAAT,CAAyB,IAAI,SAA7B,EAAwC,QAAxC,CAAP;AACD;AACD;AAHK,SAIA;AACH,eAAO,SAAS,aAAT,CAAuB,QAAvB,CAAP;AACD;AACF,CAlBD;;AAoBA;;;;;;;;AAQe,SAAS,IAAT,CAAc,KAAd,EAAqB;AAClC;AACA,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED;AACA,MAAI,iBAAU,GAAV,CAAc,KAAd,CAAJ,EAA0B;AACxB,WAAO,iBAAU,GAAV,CAAc,KAAd,CAAP;AACD;;AAED,MAAM,OAAO,mBAAmB,KAAnB,CAAb;;AAEA;AACA;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAAC,MAAM,UAAN,IAAoB,EAArB,EAAyB,MAA7C,EAAqD,GAArD,EAA0D;AACxD,QAAM,OAAO,MAAM,UAAN,CAAiB,CAAjB,CAAb;AACA,QAAM,WAAW,QAAO,KAAK,KAAZ,MAAsB,QAAvC;AACA,QAAM,aAAa,OAAO,KAAK,KAAZ,KAAsB,UAAzC;;AAEA;AACA;AACA,QAAI,KAAK,IAAL,IAAa,CAAC,QAAd,IAA0B,CAAC,UAA/B,EAA2C;AACzC,WAAK,YAAL,CAAkB,KAAK,IAAvB,EAA6B,8BAAe,KAAK,KAApB,CAA7B;AACD,KAFD,MAGK,IAAI,KAAK,IAAL,IAAa,OAAO,KAAK,KAAZ,KAAsB,QAAvC,EAAiD;AACpD;AACA,WAAK,YAAL,CAAkB,KAAK,IAAvB,EAA6B,EAA7B;;AAEA;AACA,WAAK,KAAK,IAAV,IAAkB,KAAK,KAAvB;AACD;AACF;;AAED;AACA;AACA,OAAK,IAAI,KAAI,CAAb,EAAgB,KAAI,CAAC,MAAM,UAAN,IAAoB,EAArB,EAAyB,MAA7C,EAAqD,IAArD,EAA0D;AACxD,SAAK,WAAL,CAAiB,KAAK,MAAM,UAAN,CAAiB,EAAjB,CAAL,CAAjB;AACD;;AAED;AACA,mBAAU,GAAV,CAAc,KAAd,EAAqB,IAArB;;AAEA,SAAO,IAAP;AACD","file":"make.js","sourcesContent":["import { NodeCache } from '../util/cache';\nimport * as svg from '../util/svg';\nimport { decodeEntities} from '../util/entities';\n\n/**\n * Gets a specific type of DOM Node depending on the passed in nodeName.\n *\n * @param nodeName {String} - The nodeName to disambiguate the type\n * @param nodeValue {String} - The nodeValue to set if a Text Node\n * @return {Object} - A DOM Node matching the nodeName\n */\nconst createNodeFromName = ({ nodeName, nodeValue }) => {\n  // If we're dealing with a Text Node, we need to use the special DOM method,\n  // since createElement does not understand the nodeName '#text'.\n  // All other nodes can be created through createElement.\n  if (nodeName === '#text') {\n    return document.createTextNode(nodeValue);\n  }\n  // If the nodeName matches any of the known SVG element names, mark it as\n  // SVG. The reason for doing this over detecting if nested in an <svg>\n  // element, is that we do not currently have circular dependencies in the\n  // VTree, by avoiding parentNode, so there is no way to crawl up the parents.\n  else if (svg.elements.indexOf(nodeName) > -1) {\n    return document.createElementNS(svg.namespace, nodeName);\n  }\n  // If not a Text or SVG Node, then create with the standard method.\n  else {\n    return document.createElement(nodeName);\n  }\n};\n\n/**\n * Takes in a Virtual Tree Element (VTree) and creates a DOM Node from it.\n * Sets the node into the Node cache. If this VTree already has an\n * associated node, it will reuse that.\n *\n * @param {Object} - A Virtual Tree Element or VTree-like element\n * @return {Object} - A DOM Node matching the vTree\n */\nexport default function make(vTree) {\n  // If no Virtual Tree Element was specified, return null.\n  if (!vTree) {\n    return null;\n  }\n\n  // If the DOM Node was already created, reuse the existing node.\n  if (NodeCache.has(vTree)) {\n    return NodeCache.get(vTree);\n  }\n\n  const node = createNodeFromName(vTree);\n\n  // Copy all the attributes from the vTree into the newly created DOM\n  // Node.\n  for (let i = 0; i < (vTree.attributes || []).length; i++) {\n    const attr = vTree.attributes[i];\n    const isObject = typeof attr.value === 'object';\n    const isFunction = typeof attr.value === 'function';\n\n    // If not a dynamic type, set as an attribute, since it's a valid\n    // attribute value.\n    if (attr.name && !isObject && !isFunction) {\n      node.setAttribute(attr.name, decodeEntities(attr.value));\n    }\n    else if (attr.name && typeof attr.value !== 'string') {\n      // Necessary to track the attribute/prop existence.\n      node.setAttribute(attr.name, '');\n\n      // Since this is a dynamic value it gets set as a property.\n      node[attr.name] = attr.value;\n    }\n  }\n\n  // Append all the children into the node, making sure to run them\n  // through this `make` function as well.\n  for (let i = 0; i < (vTree.childNodes || []).length; i++) {\n    node.appendChild(make(vTree.childNodes[i]));\n  }\n\n  // Add to the nodes cache.\n  NodeCache.set(vTree, node);\n\n  return node;\n}\n"]}