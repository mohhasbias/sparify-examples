'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.default = createTransaction;

var _patch = require('./patch');

var _patch2 = _interopRequireDefault(_patch);

var _finalize = require('./finalize');

var _finalize2 = _interopRequireDefault(_finalize);

var _make = require('../tree/make');

var _make2 = _interopRequireDefault(_make);

var _sync = require('../tree/sync');

var _sync2 = _interopRequireDefault(_sync);

var _helpers = require('../tree/helpers');

var _memory = require('../util/memory');

var _parser = require('../util/parser');

var _pools = require('../util/pools');

var _cache = require('../util/cache');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * If diffHTML is rendering anywhere asynchronously, we need to wait until it
 * completes before this render can be executed. This sets up the next buffer,
 * if necessary, which serves as a Boolean determination later to `bufferSet`.
 *
 * @param {Object} state - The current DOM Node state within diffHTML
 * @param {Object} nextRender - The respective arguments to set buffer
 * @return {Boolean} - Whether or not diffHTML is currently rendering
 */
var setBufferState = function setBufferState(state, nextRender) {
  // Look up all existing states for any rendering, and set the next render
  // buffer if blocked.
  _cache.StateCache.forEach(function (_state) {
    // If we attach a nextRender, then the buffer has been set.
    if (_state.isRendering) {
      state.nextRender = nextRender;
    }
  });

  // Let outside code know if we were blocked.
  return Boolean(state.nextRender);
};

/**
 * Gets a Virtual Tree Element from the newHTML passed to a diff method.
 *
 * @param {String|Object} newHTML - HTML/DOM Node/Virtual Tree Element
 * @return {Object} - Virtual Tree Element
 */
var getTreeFromNewHTML = function getTreeFromNewHTML(newHTML, options, callback) {
  // This is HTML Markup, so we need to parse it.
  if (typeof newHTML === 'string') {
    var silenceWarnings = options.silenceWarnings;
    var childNodes = (0, _parser.parse)(newHTML, null, { silenceWarnings: silenceWarnings }).childNodes;

    // If we are dealing with innerHTML, use all the Nodes. If we're dealing
    // with outerHTML, we can only support diffing against a single element,
    // so pick the first one.
    return callback(childNodes);
  }
  // This is a DOM Node, so we need to convert to a vTree.
  else if (newHTML.ownerDocument) {
      var newTree = (0, _make2.default)(newHTML);

      if (newTree.nodeType === 11) {
        _pools.pools.elementObject.unprotect(newTree);
        return callback(newTree.childNodes);
      }

      return callback(newTree);
    }

  // This is a Virtual Tree Element, or something like it, so we can just pass
  // it along.
  return callback(newHTML);
};

/**
 * Creates a sequential render transaction on a DOM Node. This requires
 * checking for a previous render first. Since diffHTML is globally connected
 * (hopefully only running one copy...), this will prevent transitions from
 * interferring.
 *
 * @param node
 * @param newHTML
 * @param options
 */
function createTransaction(node, newHTML, options) {
  if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {
    throw new Error('Missing DOM Node object');
  }

  // Used to associate state with the currently rendering node. This
  // prevents attaching properties to the instance itself.
  var state = _cache.StateCache.get(node) || {};
  var isInner = options.inner;
  var previousMarkup = state.previousMarkup;
  var previousText = state.previousText;
  var bufferSet = setBufferState(state, { node: node, newHTML: newHTML, options: options });

  // Associate the current render options with the DOM Node state.
  state.options = options;

  // Always ensure the most up-to-date state object is stored.
  _cache.StateCache.set(node, state);

  // Short circuit the rest of this render if we ended up having to set a
  // buffer. This happens when some other code using diffHTML is rendering
  // asynchronously (using transitions w/ Promise).
  if (bufferSet) {
    return;
  }

  // This looks for changes in the DOM from what we'd expect. This means we
  // need to rebuild the old Virtual Tree. This allows for keeping our tree in
  // sync with unexpected DOM changes. It's not very performant, so ideally you
  // should never change markup that diffHTML affects from outside of diffHTML
  // if performance is a concern.
  var sameInnerHTML = isInner ? previousMarkup === node.innerHTML : true;
  var sameOuterHTML = !isInner ? previousMarkup === node.outerHTML : true;
  var sameTextContent = previousText === node.textContent;

  // If the contents haven't changed, abort, since there is no point in
  // continuing. Only support this if the new markup is a string, otherwise
  // it's possible for our object recycling to match twice.
  if (typeof newHTML === 'string' && state.newHTML === newHTML) {
    return;
  }
  // Associate the last markup rendered with this node.
  else if (typeof newHTML === 'string') {
      state.newHTML = newHTML;
    }

  // We rebuild the tree whenever the DOM Node changes, including the first
  // time we patch a DOM Node.
  var rebuildTree = function rebuildTree() {
    var oldTree = state.oldTree;

    if (oldTree) {
      (0, _memory.unprotectElement)(oldTree);
    }

    state.oldTree = (0, _memory.protectElement)((0, _make2.default)(node));
  };

  if (!sameInnerHTML || !sameOuterHTML || !sameTextContent) {
    rebuildTree();
  }

  // We're rendering in the UI thread.
  state.isRendering = true;

  // Store all transaction starting middleware functions being executed here.
  var startTransactionMiddlewares = [];

  // Start off the middleware execution.
  _cache.MiddlewareCache.forEach(function (executeMiddleware) {
    // Pass the start transaction call with the input arguments.
    var result = executeMiddleware({ node: node, newHTML: newHTML, options: options });

    if (result) {
      startTransactionMiddlewares.push(result);
    }
  });

  // Alias the `oldTree` off of state for parity.
  var oldTree = state.oldTree;

  // We need to ensure that our target to diff is a Virtual Tree Element. This
  // function takes in whatever `newHTML` is and normalizes to a tree object.
  // The callback function runs on every normalized Node to wrap childNodes
  // in the case of setting innerHTML.
  var newTree = getTreeFromNewHTML(newHTML, options, function (newTree) {
    if (isInner) {
      _pools.pools.elementObject.unprotect(newTree);

      var nodeName = state.oldTree.nodeName;
      var attributes = state.oldTree.attributes;

      return (0, _helpers.createElement)(nodeName, attributes, newTree);
    }

    return Array.isArray(newTree) ? newTree[0] : newTree;
  });

  // Trigger any middleware with the DOM Node, old Virtual Tree Element, and
  // new Virtual Tree Element. This allows the middleware to mutate and inspect
  // the trees before they get consumed by diffHTML.
  var prePatchMiddlewares = [];

  // By exposing the internal tree synchronization and DOM Node patch methods,
  // a middleware could implement sync/patch on a separate thread.
  var transactionMethods = {
    syncTree: _sync2.default,
    patchNode: _patch2.default,
    protectElement: _memory.protectElement,
    unprotectElement: _memory.unprotectElement
  };

  // Save the current transaction tree state and allow the mdidleware to
  // override the trees.
  var transactionState = {
    oldTree: oldTree,
    newTree: newTree,
    transactionMethods: transactionMethods
  };

  // Run each middleware and pass the transaction state which contains internal
  // functions otherwise not available by the public API.
  for (var i = 0; i < startTransactionMiddlewares.length; i++) {
    // Pass the the existing Virtual Tree Element, and the new Virtual Tree
    // Element. This is triggered before the synchronization and patching has
    // occured.
    var result = startTransactionMiddlewares[i](transactionState);

    if (result) {
      prePatchMiddlewares.push(result);
    }
  }

  // Synchronize the trees, use any middleware replacements, if supplied.
  var patches = (0, _sync2.default)(transactionState.oldTree, transactionState.newTree);

  // Apply the set of patches to the Node.
  var promises = (0, _patch2.default)(node, patches);

  // Trigger any middleware after syncing and patching the element. This is
  // mainly useful to get the Promises for something like devtools and patches
  // for something like logging.
  var postPatchMiddlewares = [];

  for (var _i = 0; _i < prePatchMiddlewares.length; _i++) {
    // The DOM Node patching has finished and now we're sending the patchset
    // and the promises which can also be pushed into to do some asynchronous
    // behavior in a middleware.
    var _result = prePatchMiddlewares[_i]({
      patches: patches,
      promises: promises
    });

    if (_result) {
      postPatchMiddlewares.push(_result);
    }
  }

  // Clean up and finalize this transaction. If there is another transaction,
  // get a callback to run once this completes to run it.
  var finalizeTransaction = (0, _finalize2.default)(node, state);

  // Operate synchronously unless opted into a Promise-chain. Doesn't matter if
  // they are actually Promises or not, since they will all resolve eventually
  // with `Promise.all`.
  if (promises.length) {
    Promise.all(promises).then(function () {
      finalizeTransaction(postPatchMiddlewares);
    }, function (ex) {
      return console.log(ex);
    });
  } else {
    // Pass off the remaining middleware to allow users to dive into the
    // transaction completed lifecycle event.
    finalizeTransaction(postPatchMiddlewares);
  }
}
//# sourceMappingURL=transaction.js.map