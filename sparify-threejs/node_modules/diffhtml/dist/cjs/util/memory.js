'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.protectElement = protectElement;
exports.unprotectElement = unprotectElement;
exports.cleanMemory = cleanMemory;

var _pools = require('../util/pools');

var _cache = require('./cache');

/**
 * Ensures that an element is not recycled during a render cycle.
 *
 * @param element
 * @return element
 */
function protectElement(element) {
  if (Array.isArray(element)) {
    return element.forEach(protectElement);
  }

  var elementObject = _pools.pools.elementObject;
  var attributeObject = _pools.pools.attributeObject;

  elementObject.protect(element);

  element.attributes.forEach(attributeObject.protect, attributeObject);
  element.childNodes.forEach(protectElement);

  return element;
}

/**
 * Allows an element to be recycled during a render cycle.
 *
 * @param element
 * @return
 */
function unprotectElement(element) {
  if (Array.isArray(element)) {
    return element.forEach(unprotectElement);
  }

  var elementObject = _pools.pools.elementObject;
  var attributeObject = _pools.pools.attributeObject;

  elementObject.unprotect(element);

  element.attributes.forEach(attributeObject.unprotect, attributeObject);
  element.childNodes.forEach(unprotectElement);

  _cache.NodeCache.delete(element);

  return element;
}

/**
 * Recycles all unprotected allocations.
 */
function cleanMemory() {
  var elementCache = _pools.pools.elementObject.cache;
  var attributeCache = _pools.pools.attributeObject.cache;

  // Empty all element allocations.
  elementCache.allocated.forEach(function (v) {
    if (elementCache.free.length < _pools.count) {
      elementCache.free.push(v);
    }
  });

  elementCache.allocated.clear();

  // Clean out unused elements.
  _cache.NodeCache.forEach(function (node, descriptor) {
    if (!elementCache.protected.has(descriptor)) {
      _cache.NodeCache.delete(descriptor);
    }
  });

  // Empty all attribute allocations.
  attributeCache.allocated.forEach(function (v) {
    if (attributeCache.free.length < _pools.count) {
      attributeCache.free.push(v);
    }
  });

  attributeCache.allocated.clear();
}
//# sourceMappingURL=memory.js.map