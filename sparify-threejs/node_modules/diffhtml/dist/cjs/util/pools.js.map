{"version":3,"sources":["../../../lib/util/pools.js"],"names":[],"mappings":";;;;;QAUgB,U,GAAA,U;QAqCA,e,GAAA,e;AA/CT,IAAM,wBAAQ,EAAd;AACA,IAAM,wBAAQ,KAAd;;AAEP;;;;;;;AAOO,SAAS,UAAT,CAAoB,IAApB,EAA0B,IAA1B,EAAgC;AAAA,MAC/B,IAD+B,GAChB,IADgB,CAC/B,IAD+B;AAAA,MACzB,IADyB,GAChB,IADgB,CACzB,IADyB;;AAErC,MAAI,QAAQ;AACV,UAAM,EADI;AAEV,eAAW,IAAI,GAAJ,EAFD;AAGV,eAAW,IAAI,GAAJ;AAHD,GAAZ;;AAMA;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,IAApB,EAA0B,GAA1B,EAA+B;AAC7B,UAAM,IAAN,CAAW,IAAX,CAAgB,MAAhB;AACD;;AAED,SAAO;AACL,gBADK;;AAGL,OAHK,iBAGC;AACJ,UAAI,QAAQ,MAAM,IAAN,CAAW,GAAX,MAAoB,MAAhC;AACA,YAAM,SAAN,CAAgB,GAAhB,CAAoB,KAApB;AACA,aAAO,KAAP;AACD,KAPI;AASL,WATK,mBASG,KATH,EASU;AACb,YAAM,SAAN,CAAgB,MAAhB,CAAuB,KAAvB;AACA,YAAM,SAAN,CAAgB,GAAhB,CAAoB,KAApB;AACD,KAZI;AAcL,aAdK,qBAcK,KAdL,EAcY;AACf,UAAI,MAAM,SAAN,CAAgB,GAAhB,CAAoB,KAApB,CAAJ,EAAgC;AAC9B,cAAM,SAAN,CAAgB,MAAhB,CAAuB,KAAvB;AACA,cAAM,IAAN,CAAW,IAAX,CAAgB,KAAhB;AACD;AACF;AAnBI,GAAP;AAqBD;;AAGM,SAAS,eAAT,CAAyB,KAAzB,EAAgC;AACrC,QAAM,eAAN,GAAwB,WAAW,iBAAX,EAA8B;AACpD,UAAM,KAD8C;;AAGpD,QAHoD,kBAG7C;AACL,aAAO,EAAE,MAAM,EAAR,EAAY,OAAO,EAAnB,EAAP;AACD;AALmD,GAA9B,CAAxB;;AAQA,QAAM,aAAN,GAAsB,WAAW,eAAX,EAA4B;AAChD,UAAM,KAD0C;;AAGhD,QAHgD,kBAGzC;AACL,aAAO;AACL,qBAAa,EADR;AAEL,kBAAU,EAFL;AAGL,mBAAW,EAHN;AAIL,kBAAU,CAJL;AAKL,aAAK,EALA;AAML,oBAAY,EANP;AAOL,oBAAY;AAPP,OAAP;AASD;AAb+C,GAA5B,CAAtB;AAeD;;AAED;AACA,gBAAgB,KAAhB","file":"pools.js","sourcesContent":["export const pools = {};\nexport const count = 10000;\n\n/**\n * Creates a pool to query new or reused values from.\n *\n * @param name\n * @param opts\n * @return {Object} pool\n */\nexport function createPool(name, opts) {\n  var { size, fill } = opts;\n  var cache = {\n    free: [],\n    allocated: new Set(),\n    protected: new Set(),\n  };\n\n  // Prime the cache with n objects.\n  for (let i = 0; i < size; i++) {\n    cache.free.push(fill());\n  }\n\n  return {\n    cache,\n\n    get() {\n      var value = cache.free.pop() || fill();\n      cache.allocated.add(value);\n      return value;\n    },\n\n    protect(value) {\n      cache.allocated.delete(value);\n      cache.protected.add(value);\n    },\n\n    unprotect(value) {\n      if (cache.protected.has(value)) {\n        cache.protected.delete(value);\n        cache.free.push(value);\n      }\n    }\n  };\n}\n\n\nexport function initializePools(COUNT) {\n  pools.attributeObject = createPool('attributeObject', {\n    size: COUNT,\n\n    fill() {\n      return { name: '', value: '' };\n    }\n  });\n\n  pools.elementObject = createPool('elementObject', {\n    size: COUNT,\n\n    fill() {\n      return {\n        rawNodeName: '',\n        nodeName: '',\n        nodeValue: '',\n        nodeType: 1,\n        key: '',\n        childNodes: [],\n        attributes: []\n      };\n    }\n  });\n}\n\n// Create ${COUNT} items of each type.\ninitializePools(count);\n"]}