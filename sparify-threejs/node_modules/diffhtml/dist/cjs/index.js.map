{"version":3,"sources":["../../lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;2BAmCS,I;;;;;;;;;4CAqBA,O;;;;;;;;;oBAuBA,a;;;;;;oBAsBA,e;;;QAoBO,S,GAAA,S;QAuBA,S,GAAA,S;QA4BA,O,GAAA,O;QA8BA,kB,GAAA,kB;QAsCA,qB,GAAA,qB;QAqCA,G,GAAA,G;;AArRhB;;;;AACA;;AACA;;;;AAqGA;;;;;;;;;;;;;;;;;;AAkBO,SAAS,SAAT,CAAmB,OAAnB,EAAmD;AAAA,MAAvB,MAAuB,yDAAhB,EAAgB;AAAA,MAAZ,OAAY,yDAAJ,EAAI;;AACxD,UAAQ,KAAR,GAAgB,KAAhB;AACA,6BAAkB,OAAlB,EAA2B,MAA3B,EAAmC,OAAnC;AACD;;AAED;;;;;;;;;;;;;;;;;;AAkBO,SAAS,SAAT,CAAmB,OAAnB,EAAmD;AAAA,MAAvB,MAAuB,yDAAhB,EAAgB;AAAA,MAAZ,OAAY,yDAAJ,EAAI;;AACxD,UAAQ,KAAR,GAAgB,IAAhB;AACA,6BAAkB,OAAlB,EAA2B,MAA3B,EAAmC,OAAnC;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;AAuBO,SAAS,OAAT,CAAiB,OAAjB,EAA0B,UAA1B,EAAkD;AAAA,MAAZ,OAAY,yDAAJ,EAAI;;AACvD,6BAAkB,OAAlB,EAA2B,UAA3B,EAAuC,OAAvC;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BO,SAAS,kBAAT,CAA4B,KAA5B,EAAmC,QAAnC,EAA6C;AAClD,MAAI,CAAC,KAAL,EAAY;AACV,UAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,MAAI,CAAC,QAAL,EAAe;AACb,UAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACD;;AAED;AACA,MAAI,OAAO,IAAP,sBAA8B,OAA9B,CAAsC,KAAtC,MAAiD,CAAC,CAAtD,EAAyD;AACvD,UAAM,IAAI,KAAJ,CAAU,yBAAyB,KAAnC,CAAN;AACD;;AAED,sBAAiB,KAAjB,EAAwB,IAAxB,CAA6B,QAA7B;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;AAqBO,SAAS,qBAAT,CAA+B,KAA/B,EAAsC,QAAtC,EAAgD;AACrD,MAAI,CAAC,QAAD,IAAa,KAAjB,EAAwB;AACtB,wBAAiB,KAAjB,EAAwB,MAAxB,GAAiC,CAAjC;AACD,GAFD,MAGK,IAAI,SAAS,QAAb,EAAuB;AAC1B;AACA,QAAI,OAAO,IAAP,sBAA8B,OAA9B,CAAsC,KAAtC,MAAiD,CAAC,CAAtD,EAAyD;AACvD,YAAM,IAAI,KAAJ,CAAU,wBAAwB,KAAlC,CAAN;AACD;;AAED,QAAI,QAAQ,oBAAiB,KAAjB,EAAwB,OAAxB,CAAgC,QAAhC,CAAZ;AACA,wBAAiB,KAAjB,EAAwB,MAAxB,CAA+B,KAA/B,EAAsC,CAAtC;AACD,GARI,MASA;AACH,SAAK,IAAI,MAAT,yBAAoC;AAClC,0BAAiB,MAAjB,EAAwB,MAAxB,GAAiC,CAAjC;AACD;AACF;AACF;;AAED;;;;;;;;;;;;;;;;;AAiBO,SAAS,GAAT,CAAa,UAAb,EAAyB;AAC9B,MAAI,OAAO,UAAP,KAAsB,UAA1B,EAAsC;AACpC,UAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED;AACA,yBAAgB,GAAhB,CAAoB,UAApB;;AAEA;AACA,SAAO,YAAM;AACX;AACA;AACA,2BAAgB,MAAhB,CAAuB,UAAvB;;AAEA;AACA;AACA,eAAW,WAAX,IAA0B,WAAW,WAAX,EAA1B;AACD,GARD;AASD","file":"index.js","sourcesContent":["import createTransaction from './node/transaction';\nimport { states as transitionStates } from './util/transitions';\nimport { MiddlewareCache } from './util/cache';\n\n/**\n * Parses HTML strings into Virtual Tree elements. This can be a single static\n * string, like that produced by a template engine, or a complex tagged\n * template string.\n *\n * @example\n *\n *    import { html } from 'diffhtml'\n *\n *    // Parses HTML directly from a string, useful for consuming template\n *    // engine output and inlining markup.\n *    const fromString = html('<center>Markup</center>')\n *\n *    // Parses a tagged template string. This can contain interpolated\n *    // values in between the `${...}` symbols. The values are typically\n *    // going to be strings, but you can pass any value to any property or\n *    // attribute.\n *    const fromTaggedTemplate = html`<center>${'Markup'}</center>`\n *\n *    // You can pass functions to event handlers and basically any value to\n *    // property or attribute. If diffHTML encounters a value that is not a\n *    // string it will still create an attribute, but the value will be an\n *    // empty string. This is necessary for tracking changes.\n *    const dynamicValues = html`<center onclick=${\n *      ev => console.log('Clicked the center tag')\n *    }>Markup</center>`\n *\n *\n * @param {String} markup - A string or tagged template string containing HTML\n * @return {Object|Array} - A single instance or array of Virtual Tree elements\n */\nexport { html } from './util/tagged-template';\n\n/**\n * Recycles internal memory, removes state, and cancels all scheduled render\n * transactions. This is mainly going to be used in unit tests and not\n * typically in production. The reason for this is that components are usually\n * going to live the lifetime of the page, with a refresh cleaning slate.\n *\n * @example\n *\n *    import { innerHTML, release } from 'diffhtml'\n *\n *    // Associate state and reuse pre-allocated memory.\n *    innerHTML(document.body, 'Hello world')\n *\n *    // Free all association to `document.body`.\n *    release(document.body)\n *\n *\n * @param {Object} node - A DOM Node that is being tracked by diffHTML\n */\nexport { default as release } from './node/release';\n\n/**\n * A convenient helper to create Virtual Tree elements. This can be used in\n * place of HTML parsing and is what the Babel transform compiles down to.\n *\n * @example\n *\n *    import { createElement } from 'diffhtml'\n *\n *    // Creates a div with the test class and a nested text node.\n *    const vTree = createElement('div', { 'class': 'test' }, 'Hello world')\n *\n *    // Creates an empty div.\n *    const vTree = createElement('div')\n *\n *\n * @param {String} nodeName - The tagName passed to `document.createElement`\n * @param {Array =} attributes - List of key/val attributes\n * @param {Array|Object =} childNodes - A single Virtual Tree element or a list\n * of elements, all remaining arguments are concatenated together.\n * @return {Object} A pooled object representing the virtual element\n */\nexport { createElement } from './tree/helpers';\n\n/**\n * Recycles internal memory, removes state, and cancels all scheduled render\n * transactions. This is mainly going to be used in unit tests and not\n * typically in production. The reason for this is that components are usually\n * going to live the lifetime of the page, with a refresh cleaning slate.\n *\n * @example\n *\n *    import { innerHTML, release } from 'diffhtml'\n *\n *    // Associate state and reuse pre-allocated memory.\n *    innerHTML(document.body, 'Hello world')\n *\n *    // Free all association to `document.body`.\n *    release(document.body)\n *\n *\n * @param {Object} node - A DOM Node that is being tracked by diffHTML\n * @return {Object} A pooled object representing the virtual attribute\n */\nexport { createAttribute } from './tree/helpers';\n\n/**\n * Used to diff the outerHTML contents of the passed element with the markup\n * contents. Very useful for applying a global diff on the\n * `document.documentElement`.\n *\n * @example\n *\n *    import { outerHTML } from 'diffhtml'\n *\n *    // Remove all attributes and set the children to be a single text node\n *    // containing the text 'Hello world',\n *    outerHTML(document.body, '<body>Hello world</body>')\n *\n *\n * @param {Object} element - A DOM Node to render into\n * @param {String|Object} markup='' - A string of markup or virtual tree\n * @param {Object =} options={} - An object containing configuration options\n */\nexport function outerHTML(element, markup='', options={}) {\n  options.inner = false;\n  createTransaction(element, markup, options);\n}\n\n/**\n * Used to diff the innerHTML contents of the passed element with the markup\n * contents. This is useful with libraries like Backbone that render Views\n * into element container.\n *\n * @example\n *\n *    import { innerHTML } from 'diffhtml'\n *\n *    // Sets the body children to be a single text node containing the text\n *    // 'Hello world'.\n *    innerHTML(document.body, 'Hello world')\n *\n *\n * @param {Object} element - A DOM Node to render into\n * @param {String|Object} markup='' - A string of markup or virtual tree\n * @param {Object =} options={} - An object containing configuration options\n */\nexport function innerHTML(element, markup='', options={}) {\n  options.inner = true;\n  createTransaction(element, markup, options);\n}\n\n/**\n * Used to diff two elements. The `inner` Boolean property can be specified in\n * the options to set innerHTML\\outerHTML behavior. By default it is\n * outerHTML.\n *\n * @example\n *\n *    // It is usually better to rename this method to something descriptive.\n *    import { element as diffElement } from 'diffhtml'\n *\n *    // Create a new body tag.\n *    const newBody = $(`<body>\n *      <strong>Hello world!</strong>\n *    </body>`).get();\n *\n *\n *    diffElement(document.body, newBody);\n *\n *\n * @param {Object} element - A DOM Node to render into\n * @param {Object} newElement - A string of markup or virtual tree\n * @param {Object =} options={} - An object containing configuration options\n */\nexport function element(element, newElement, options={}) {\n  createTransaction(element, newElement, options);\n}\n\n/**\n * Adds a global transition listener. With many elements this could be an\n * expensive operation, so try to limit the amount of listeners added if you're\n * concerned about performance.\n *\n * Since the callback triggers with various elements, most of which you\n * probably don't care about, you'll want to filter. A good way of filtering\n * is to use the DOM `matches` method. It's fairly well supported\n * (http://caniuse.com/#feat=matchesselector) and may suit many projects. If\n * you need backwards compatibility, consider using jQuery's `is`.\n *\n * @example\n *\n *    import { addTransitionState } from 'diffhtml'\n *\n *    // Fade in all elements as they are added to the DOM.\n *    addTransitionState('attached', el => $(el).fadeIn().promise())\n *\n *    // Fade out all elements as they leave the DOM.\n *    addTransitionState('detached', el => $(el).fadeOut().promise())\n *\n *\n * @param state - String name that matches what's available in the\n * documentation above.\n * @param callback - Function to receive the matching elements.\n */\nexport function addTransitionState(state, callback) {\n  if (!state) {\n    throw new Error('Missing transition state name');\n  }\n\n  if (!callback) {\n    throw new Error('Missing transition state callback');\n  }\n\n  // Not a valid state name.\n  if (Object.keys(transitionStates).indexOf(state) === -1) {\n    throw new Error('Invalid state name: ' + state);\n  }\n\n  transitionStates[state].push(callback);\n}\n\n/**\n * Removes a global transition listener.\n *\n * When invoked with no arguments, this method will remove all transition\n * callbacks. When invoked with the name argument it will remove all transition\n * state callbacks matching the name, and so on for the callback.\n *\n * @example\n *\n *    import { removeTransitionState } from 'diffhtml'\n *\n *    // Remove all transition state handlers.\n *    removeTransitionState()\n *\n *    // Remove all `attached` state handlers.\n *    removeTransitionState('attached')\n *\n * @param {String =} state - Name that matches what's available in the\n * documentation above\n * @param {Function =} callback - Callback to receive the matching elements\n */\nexport function removeTransitionState(state, callback) {\n  if (!callback && state) {\n    transitionStates[state].length = 0;\n  }\n  else if (state && callback) {\n    // Not a valid state name.\n    if (Object.keys(transitionStates).indexOf(state) === -1) {\n      throw new Error('Invalid state name ' + state);\n    }\n\n    let index = transitionStates[state].indexOf(callback);\n    transitionStates[state].splice(index, 1);\n  }\n  else {\n    for (let state in transitionStates) {\n      transitionStates[state].length = 0;\n    }\n  }\n}\n\n/**\n * Registers middleware functions which are called during the render\n * transaction flow. These should be very fast and ideally asynchronous to\n * avoid blocking the render.\n *\n * @example\n *\n *    import { use } from 'diffhtml'\n *    import logger from 'diffhtml-logger'\n *\n *    // Add the diffHTML logger middleware, to console out render information.\n *    use(logger)\n *\n *\n * @param {Function} middleware - A function that gets passed internals\n * @return {Function} - When invoked removes and deactivates the middleware\n */\nexport function use(middleware) {\n  if (typeof middleware !== 'function') {\n    throw new Error('Middleware must be a function');\n  }\n\n  // Add the function to the set of middlewares.\n  MiddlewareCache.add(middleware);\n\n  // The unsubscribe method for the middleware.\n  return () => {\n    // Remove this middleware from the internal cache. This will prevent it\n    // from being invoked in the future.\n    MiddlewareCache.delete(middleware);\n\n    // Call the unsubscribe method if defined in the middleware (allows them\n    // to cleanup).\n    middleware.unsubscribe && middleware.unsubscribe();\n  };\n}\n"]}