{"version":3,"sources":["../../../lib/tree/helpers.js"],"names":[],"mappings":"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","file":"helpers.js","sourcesContent":["import { pools } from '../util/pools';\nimport escape from '../util/escape';\nimport makeTree from '../tree/make';\n\n/**\n * TODO Phase this out if possible, super slow iterations...\n *\n * @param childNodes\n * @return\n */\nconst normalizeChildNodes = (_childNodes) => {\n  const newChildNodes = [];\n  const childNodes = Array.isArray(_childNodes) ? _childNodes : [_childNodes];\n\n  childNodes.forEach(childNode => {\n    if (typeof childNode !== 'object') {\n      newChildNodes.push(createElement('#text', null, String(childNode)));\n    }\n    else if ('length' in childNode) {\n      for (let i = 0; i < childNode.length; i++) {\n        const newChild = childNode[i];\n        const newNode = newChild.ownerDocument ? makeTree(newChild) : newChild;\n\n        newChildNodes.push(newNode);\n      }\n    }\n    else {\n      const node = childNode.ownerDocument ? makeTree(childNode) : childNode;\n      newChildNodes.push(node);\n    }\n  });\n\n  return newChildNodes;\n};\n\n/**\n * Creates a virtual element used in or as a virtual tree.\n *\n * @param nodeName\n * @param attributes\n * @param childNodes\n * @return {Object} element\n */\nexport function createElement(nodeName, attributes, childNodes) {\n  if (nodeName === '') {\n    return normalizeChildNodes(childNodes);\n  }\n\n  if (typeof nodeName === 'function') {\n    const props = attributes;\n    props.children = childNodes;\n    return new nodeName(props).render(props);\n  }\n  else if (typeof nodeName === 'object') {\n    const props = attributes;\n    props.children = childNodes;\n    return nodeName.render(props);\n  }\n\n  const entry = pools.elementObject.get();\n  const isTextNode = nodeName === 'text' || nodeName === '#text';\n\n  entry.key = '';\n  entry.nodeName = nodeName.toLowerCase();\n  entry.rawNodeName = nodeName;\n\n  if (!isTextNode) {\n    entry.nodeType = 1;\n    entry.nodeValue = '';\n    entry.attributes = attributes || [];\n    entry.childNodes = normalizeChildNodes(childNodes);\n\n    // Set the key prop if passed as an attr.\n    entry.attributes.some(attr => {\n      if (attr.name === 'key') {\n        entry.key = attr.value;\n        return true;\n      }\n    });\n  }\n  else {\n    const value = Array.isArray(childNodes) ? childNodes.join('') : childNodes;\n\n    entry.nodeType = nodeName === '#document-fragment' ? 11 : 3;\n    entry.nodeValue = escape(String(value));\n    entry.attributes.length = 0;\n    entry.childNodes.length = 0;\n  }\n\n  return entry;\n}\n\n/**\n * Creates a virtual attribute used in a virtual element.\n *\n * @param name\n * @param value\n * @return {Object} attribute\n */\nexport function createAttribute(name, value) {\n  const entry = pools.attributeObject.get();\n\n  entry.name = name;\n  entry.value = value;\n\n  return entry;\n}\n"]}