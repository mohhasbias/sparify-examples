{"version":3,"sources":["../../../lib/tree/make.js"],"names":[],"mappings":";;;;;kBAUwB,Q;;AAVxB;;AACA;;AACA;;AAEA;;;;;;AAMe,SAAS,QAAT,CAAkB,IAAlB,EAAwB;AACrC;AACA,MAAM,WAAW,KAAK,QAAL,CAAc,WAAd,EAAjB;AACA,MAAM,WAAW,KAAK,QAAtB;AACA,MAAM,YAAY,KAAK,SAAvB;AACA,MAAM,aAAa,KAAK,UAAL,IAAmB,EAAtC;AACA,MAAM,aAAa,KAAK,UAAL,IAAmB,EAAtC;;AAEA;AACA;AACA,MAAI,aAAa,CAAb,IAAkB,aAAa,CAA/B,IAAoC,aAAa,EAArD,EAAyD;AACvD,WAAO,KAAP;AACD;;AAED;AACA,MAAM,aAAa,aAAa,OAAb,IAAwB,aAAa,MAAxD;;AAEA;AACA;AACA,MAAM,eAAe,aAAa,SAAb,GAAyB,EAA9C;;AAEA;AACA;AACA;AACA,MAAM,QAAQ,4BAAc,KAAK,QAAnB,EAA6B,EAA7B,EAAiC,YAAjC,CAAd;;AAEA;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,WAAW,MAA/B,EAAuC,GAAvC,EAA4C;AAC1C,QAAM,OAAO,8BAAgB,WAAW,CAAX,EAAc,IAA9B,EAAoC,WAAW,CAAX,EAAc,KAAlD,CAAb;;AAEA;AACA,QAAI,KAAK,IAAL,KAAc,KAAlB,EAAyB;AACvB,YAAM,GAAN,GAAY,KAAK,KAAjB;AACD;;AAED,UAAM,UAAN,CAAiB,IAAjB,CAAsB,IAAtB;AACD;;AAED;AACA,mBAAU,GAAV,CAAc,KAAd,EAAqB,IAArB;;AAEA;AACA,OAAK,IAAI,KAAI,CAAb,EAAgB,KAAI,WAAW,MAA/B,EAAuC,IAAvC,EAA4C;AAC1C,QAAM,UAAU,SAAS,WAAW,EAAX,CAAT,CAAhB;;AAEA;AACA;AACA,QAAI,OAAJ,EAAa;AACX,YAAM,UAAN,CAAiB,IAAjB,CAAsB,OAAtB;AACD;AACF;;AAED;AACA;AACA,MAAI,MAAM,QAAN,KAAmB,MAAvB,EAA+B;AAC7B,UAAM,UAAN,GAAmB,MAAM,UAAN,CAAiB,MAAjB,CAAwB,qBAAa;AACtD,aAAO,UAAU,QAAV,KAAuB,MAAvB,IAAiC,UAAU,QAAV,KAAuB,MAA/D;AACD,KAFkB,CAAnB;AAGD;;AAED,SAAO,KAAP;AACD","file":"make.js","sourcesContent":["import { createElement, createAttribute } from './helpers';\nimport { pools } from '../util/pools';\nimport { NodeCache } from '../util/cache';\n\n/**\n * Converts a DOM Node into a Virtual Tree Element.\n *\n * @param {Object} node - A DOM Node\n * @return {Object} - A Virtual Tree Element\n */\nexport default function makeNode(node) {\n  // These are the only DOM Node properties we care about.\n  const nodeName = node.nodeName.toLowerCase();\n  const nodeType = node.nodeType;\n  const nodeValue = node.nodeValue;\n  const attributes = node.attributes || [];\n  const childNodes = node.childNodes || [];\n\n  // We ignore any DOM Node that isn't an: Element, Text, Document Fragment, or\n  // Shadow Root.\n  if (nodeType !== 1 && nodeType !== 3 && nodeType !== 11) {\n    return false;\n  }\n\n  // We can consider either of these DOM Nodes as Text Nodes.\n  const isTextNode = nodeName === '#text' || nodeName === 'text';\n\n  // In the case of Text Node's we can have the createElement function set\n  // the nodeValue for us.\n  const initialValue = isTextNode ? nodeValue : [];\n\n  // Creates a Virtual Tree Element based off this nodeName. We aren't going\n  // to set the attributes right away since we want to set the key on the vTree\n  // and push directly into the pre-existing array.\n  const vTree = createElement(node.nodeName, [], initialValue);\n\n  // Creates Virtual Tree Attributes for each attribute in the DOM Node.\n  for (let i = 0; i < attributes.length; i++) {\n    const attr = createAttribute(attributes[i].name, attributes[i].value);\n\n    // If the `key` attribute is found, set the respective value on the vTree.\n    if (attr.name === 'key') {\n      vTree.key = attr.value;\n    }\n\n    vTree.attributes.push(attr);\n  }\n\n  // Associate this newly allocated vTree with this DOM Node.\n  NodeCache.set(vTree, node);\n\n  // If the element has child nodes, convert them all to virtual nodes.\n  for (let i = 0; i < childNodes.length; i++) {\n    const newNode = makeNode(childNodes[i]);\n\n    // We may get a falsy value back if we pass in a Comment Node or other\n    // DOM Nodes that we intentionally ignore.\n    if (newNode) {\n      vTree.childNodes.push(newNode);\n    }\n  }\n\n  // Prune out whitespace/everything from between tags nested under the HTML\n  // tag, since this behavior can be observed in browsers and specification.\n  if (vTree.nodeName === 'html') {\n    vTree.childNodes = vTree.childNodes.filter(childNode => {\n      return childNode.nodeName === 'head' || childNode.nodeName === 'body';\n    });\n  }\n\n  return vTree;\n}\n"]}