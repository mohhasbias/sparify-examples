'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.createElement = createElement;
exports.createAttribute = createAttribute;

var _pools = require('../util/pools');

var _escape = require('../util/escape');

var _escape2 = _interopRequireDefault(_escape);

var _make = require('../tree/make');

var _make2 = _interopRequireDefault(_make);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * TODO Phase this out if possible, super slow iterations...
 *
 * @param childNodes
 * @return
 */
var normalizeChildNodes = function normalizeChildNodes(_childNodes) {
  var newChildNodes = [];
  var childNodes = Array.isArray(_childNodes) ? _childNodes : [_childNodes];

  childNodes.forEach(function (childNode) {
    if ((typeof childNode === 'undefined' ? 'undefined' : _typeof(childNode)) !== 'object') {
      newChildNodes.push(createElement('#text', null, String(childNode)));
    } else if ('length' in childNode) {
      for (var i = 0; i < childNode.length; i++) {
        var newChild = childNode[i];
        var newNode = newChild.ownerDocument ? (0, _make2.default)(newChild) : newChild;

        newChildNodes.push(newNode);
      }
    } else {
      var node = childNode.ownerDocument ? (0, _make2.default)(childNode) : childNode;
      newChildNodes.push(node);
    }
  });

  return newChildNodes;
};

/**
 * Creates a virtual element used in or as a virtual tree.
 *
 * @param nodeName
 * @param attributes
 * @param childNodes
 * @return {Object} element
 */
function createElement(nodeName, attributes, childNodes) {
  if (nodeName === '') {
    return normalizeChildNodes(childNodes);
  }

  if (typeof nodeName === 'function') {
    var props = attributes;
    props.children = childNodes;
    return new nodeName(props).render(props);
  } else if ((typeof nodeName === 'undefined' ? 'undefined' : _typeof(nodeName)) === 'object') {
    var _props = attributes;
    _props.children = childNodes;
    return nodeName.render(_props);
  }

  var entry = _pools.pools.elementObject.get();
  var isTextNode = nodeName === 'text' || nodeName === '#text';

  entry.key = '';
  entry.nodeName = nodeName.toLowerCase();
  entry.rawNodeName = nodeName;

  if (!isTextNode) {
    entry.nodeType = 1;
    entry.nodeValue = '';
    entry.attributes = attributes || [];
    entry.childNodes = normalizeChildNodes(childNodes);

    // Set the key prop if passed as an attr.
    entry.attributes.some(function (attr) {
      if (attr.name === 'key') {
        entry.key = attr.value;
        return true;
      }
    });
  } else {
    var value = Array.isArray(childNodes) ? childNodes.join('') : childNodes;

    entry.nodeType = nodeName === '#document-fragment' ? 11 : 3;
    entry.nodeValue = (0, _escape2.default)(String(value));
    entry.attributes.length = 0;
    entry.childNodes.length = 0;
  }

  return entry;
}

/**
 * Creates a virtual attribute used in a virtual element.
 *
 * @param name
 * @param value
 * @return {Object} attribute
 */
function createAttribute(name, value) {
  var entry = _pools.pools.attributeObject.get();

  entry.name = name;
  entry.value = value;

  return entry;
}
//# sourceMappingURL=helpers.js.map