'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sync;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var slice = Array.prototype.slice;
var filter = Array.prototype.filter;

// Patch actions.
var REMOVE_ELEMENT_CHILDREN = exports.REMOVE_ELEMENT_CHILDREN = -2;
var REMOVE_ENTIRE_ELEMENT = exports.REMOVE_ENTIRE_ELEMENT = -1;
var REPLACE_ENTIRE_ELEMENT = exports.REPLACE_ENTIRE_ELEMENT = 0;
var MODIFY_ELEMENT = exports.MODIFY_ELEMENT = 1;
var MODIFY_ATTRIBUTE = exports.MODIFY_ATTRIBUTE = 2;
var CHANGE_TEXT = exports.CHANGE_TEXT = 3;

/**
 * Synchronizes changes from the newTree into the oldTree.
 *
 * @param oldTree
 * @param newTree
 * @param patches - optional
 */
function sync(oldTree, newTree, patches) {
  patches = patches || [];

  if (!Array.isArray(patches)) {
    throw new Error('Missing Array to sync patches into');
  }

  if (!oldTree) {
    throw new Error('Missing existing tree to sync');
  }

  var oldNodeValue = oldTree.nodeValue;
  var oldChildNodes = oldTree.childNodes;
  var oldIsTextNode = oldTree.nodeName === '#text';

  // TODO Make this static...
  var oldChildNodesLength = oldChildNodes ? oldChildNodes.length : 0;

  if (!newTree) {
    var removed = [oldTree].concat(oldChildNodes.splice(0, oldChildNodesLength));

    patches.push({
      __do__: REMOVE_ENTIRE_ELEMENT,
      element: oldTree,
      toRemove: removed
    });

    return patches;
  }

  var nodeValue = newTree.nodeValue;
  var childNodes = newTree.childNodes;
  var childNodesLength = childNodes ? childNodes.length : 0;
  var nodeName = newTree.nodeName;
  var attributes = newTree.attributes;
  var newIsTextNode = nodeName === '#text';
  var newIsFragment = newTree.nodeName === '#document-fragment';

  // Replace the key attributes.
  oldTree.key = newTree.key;

  // If the element we're replacing is totally different from the previous
  // replace the entire element, don't bother investigating children.
  if (oldTree.nodeName !== newTree.nodeName) {
    patches.push({
      __do__: REPLACE_ENTIRE_ELEMENT,
      old: oldTree,
      new: newTree
    });

    return patches;
  }
  // This element never changes.
  else if (oldTree === newTree) {
      return patches;
    }

  var areTextNodes = oldIsTextNode && newIsTextNode;

  // If the top level nodeValue has changed we should reflect it.
  if (areTextNodes && oldNodeValue !== nodeValue) {
    patches.push({
      __do__: CHANGE_TEXT,
      element: oldTree,
      value: newTree.nodeValue
    });

    oldTree.nodeValue = newTree.nodeValue;

    return patches;
  }

  // Ensure keys exist for all the old & new elements.
  var noOldKeys = !oldChildNodes.some(function (oldChildNode) {
    return oldChildNode.key;
  });
  var newKeys = null;
  var oldKeys = null;

  if (!noOldKeys) {
    newKeys = new Set(childNodes.map(function (childNode) {
      return String(childNode.key);
    }).filter(Boolean));

    oldKeys = new Set(oldChildNodes.map(function (childNode) {
      return String(childNode.key);
    }).filter(Boolean));
  }

  // Most common additive elements.
  if (childNodesLength > oldChildNodesLength) {
    // Store elements in a DocumentFragment to increase performance and be
    // generally simplier to work with.
    var fragment = [];

    for (var i = oldChildNodesLength; i < childNodesLength; i++) {
      // Internally add to the tree.
      oldChildNodes.push(childNodes[i]);

      // Add to the document fragment.
      fragment.push(childNodes[i]);
    }

    oldChildNodesLength = oldChildNodes.length;

    // Assign the fragment to the patches to be injected.
    patches.push({
      __do__: MODIFY_ELEMENT,
      element: oldTree,
      fragment: fragment
    });
  }

  // Remove these elements.
  if (oldChildNodesLength > childNodesLength) {
    (function () {
      // For now just splice out the end items.
      var diff = oldChildNodesLength - childNodesLength;
      var toRemove = [];
      var shallowClone = [].concat(_toConsumableArray(oldChildNodes));

      // There needs to be keys to diff, if not, there's no point in checking.
      if (noOldKeys) {
        toRemove = oldChildNodes.splice(oldChildNodesLength - diff, diff);
      }
      // This is an expensive operation so we do the above check to ensure that a
      // key was specified.
      else {
          (function () {
            var keysToRemove = new Set();

            // Find the keys in the sets to remove.
            oldKeys.forEach(function (key) {
              if (!newKeys.has(key)) {
                keysToRemove.add(key);
              }
            });

            // If the original childNodes contain a key attribute, use this to
            // compare over the naive method below.
            shallowClone.forEach(function (oldChildNode, i) {
              if (toRemove.length >= diff) {
                return;
              } else if (keysToRemove.has(oldChildNode.key)) {
                var nextChild = oldChildNodes[i + 1];
                var nextIsTextNode = nextChild && nextChild.nodeType === 3;
                var count = 1;

                // Always remove whitespace in between the elements.
                if (nextIsTextNode && toRemove.length + 2 <= diff) {
                  count = 2;
                }
                // All siblings must contain a key attribute if they exist.
                else if (nextChild && nextChild.nodeType === 1 && !nextChild.key) {
                    throw new Error('\n              All element siblings must consistently contain key attributes.\n            '.trim());
                  }

                // Find the index position from the original array.
                var indexPos = oldChildNodes.indexOf(oldChildNode);

                // Find all the items to remove.
                toRemove.push.apply(toRemove, oldChildNodes.splice(indexPos, count));
              }
            });
          })();
        }

      // Ensure we don't remove too many elements by accident;
      toRemove.length = diff;

      // Ensure our internal length check is matched.
      oldChildNodesLength = oldChildNodes.length;

      if (childNodesLength === 0) {
        patches.push({
          __do__: REMOVE_ELEMENT_CHILDREN,
          element: oldTree,
          toRemove: toRemove
        });
      } else {
        // Remove the element, this happens before the splice so that we still
        // have access to the element.
        toRemove.forEach(function (old) {
          return patches.push({
            __do__: MODIFY_ELEMENT,
            old: old
          });
        });
      }
    })();
  }

  // Replace elements if they are different.
  if (oldChildNodesLength >= childNodesLength) {
    for (var _i = 0; _i < childNodesLength; _i++) {
      if (oldChildNodes[_i].nodeName !== childNodes[_i].nodeName) {
        // Add to the patches.
        patches.push({
          __do__: MODIFY_ELEMENT,
          old: oldChildNodes[_i],
          new: childNodes[_i]
        });

        // Replace the internal tree's point of view of this element.
        oldChildNodes[_i] = childNodes[_i];
      } else {
        sync(oldChildNodes[_i], childNodes[_i], patches);
      }
    }
  }

  // Attributes are significantly easier than elements and we ignore checking
  // them on fragments. The algorithm is the same as elements, check for
  // additions/removals based off length, and then iterate once to make
  // adjustments.
  if (!newIsFragment && attributes) {
    // Cache the lengths for performance and readability.
    var oldLength = oldTree.attributes.length;
    var newLength = attributes.length;

    // Construct a single patch for the entire changeset.
    var patch = {
      __do__: MODIFY_ATTRIBUTE,
      element: oldTree,
      attributes: []
    };

    // Find additions.
    if (newLength > oldLength) {
      for (var _i2 = oldLength; _i2 < newLength; _i2++) {
        var oldAttr = oldTree.attributes[_i2];
        var newAttr = attributes[_i2];

        patch.attributes.push({ oldAttr: oldAttr, newAttr: newAttr });
        oldTree.attributes.push(newAttr);
      }
    }

    // Find removals.
    if (oldLength > newLength) {
      for (var _i3 = newLength; _i3 < oldLength; _i3++) {
        var _oldAttr = oldTree.attributes[_i3];
        var _newAttr = attributes[_i3];

        patch.attributes.push({ oldAttr: _oldAttr, newAttr: _newAttr });
      }

      // Reset the internal attributes to be less.
      oldTree.attributes = oldTree.attributes.slice(0, newLength);
    }

    // Find changes.
    for (var _i4 = 0; _i4 < attributes.length; _i4++) {
      var _oldAttr2 = oldTree.attributes[_i4];
      var _newAttr2 = attributes[_i4];
      var oldAttrName = _oldAttr2 ? _oldAttr2.name : undefined;
      var oldAttrValue = _oldAttr2 ? _oldAttr2.value : undefined;
      var newAttrName = _newAttr2 ? _newAttr2.name : undefined;
      var newAttrValue = _newAttr2 ? _newAttr2.value : undefined;

      // Only push in a change if the attribute or value changes.
      if (oldAttrValue !== newAttrValue) {
        // Add the attribute items to add and remove.
        patch.attributes.push({
          oldAttr: _oldAttr2,
          newAttr: _newAttr2
        });

        oldTree.attributes[_i4] = _newAttr2;
      }
    }

    // Add the attribute changes patch to the series of patches, unless there
    // are no attributes to change.
    if (patch.attributes.length) {
      patches.push(patch);
    }
  }

  return patches;
}
//# sourceMappingURL=sync.js.map